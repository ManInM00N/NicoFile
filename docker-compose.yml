services:
  nicofile-redis:
    image: redis:7.0.12
    container_name: nicofile-redis
    ports:
      - "6380:6380"
    volumes:
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./redis/data:/data
    command: redis-server /etc/redis/redis.conf
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "2"
  nicofile_kafka:
    image: bitnami/kafka:3.9.0
    container_name: nicofile-kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT="yes"  # 启用 Kraft 模式
      - KAFKA_CFG_PROCESS_ROLES=broker,controller  # 启用 KRaft 模式
      - KAFKA_CFG_NODE_ID=1  # 节点 ID
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER  # 指定控制器监听器名称
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093  # 投票者配置
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093  # 监听器
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092  # 对外暴露的地址
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes  # 允许明文通信
    volumes:
      - ./kafka:/bitnami/kafka
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
  etcd:
    image: bitnami/etcd:3.5.18
    container_name: nicofile-etcd
    hostname: etcd
    user: root  # 以 root 用户运行容器
    ports:
      - "2379:2379"  # Etcd 客户端端口
      - "2380:2380"  # Etcd 集群通信端口
    environment:
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
      ETCD_INITIAL_ADVERTISE_PEER_URLS: "http://etcd:2380"
      ETCD_LISTEN_PEER_URLS: "http://0.0.0.0:2380"
      ETCD_INITIAL_CLUSTER: "etcd_kafka=http://etcd:2380"
      ETCD_INITIAL_CLUSTER_TOKEN: "etcd-cluster"
      ETCD_INITIAL_CLUSTER_STATE: "new"
      ETCD_NAME: "etcd_kafka"
      ALLOW_NONE_AUTHENTICATION: yes
    volumes:
      - ./etcd:/bitnami/etcd
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    networks:
      - kafka-etcd-network
  # Prometheus 服务
  prometheus:
    image: prom/prometheus:latest
    container_name: nico-prometheus
    ports:
      - "29090:9090"  # Prometheus Web UI 端口
    volumes:
      - ./nicofile/etc/prometheus.yml:/etc/prometheus/prometheus.yml  # 挂载 Prometheus 配置文件
    networks:
      - monitoring-network
    restart: always

  # Grafana 服务
  grafana:
    image: grafana/grafana:latest
    container_name: nico-grafana
    restart: always
    ports:
      - "23000:3000"  # Grafana Web UI 端口
    volumes:
      - ./grafana-data:/var/lib/grafana  # 持久化 Grafana 数据
    networks:
      - monitoring-network



  mysql:
    image: mysql:8.4.4
    container_name: nico-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: nicofile
      MYSQL_USER: canal
      MYSQL_PASSWORD: canal
    ports:
      - "23306:3306"
#    volumes:
    restart: always

    networks:
      - canal-network

  canal-server:
    image: canal/canal-server:v1.1.8
    container_name: nico-canal-server
    environment:
      canal.instance.master.address: mysql:3306
      canal.instance.dbUsername: canal
      canal.instance.dbPassword: canal
      canal.instance.filter.regex: nicofile\\..*
    depends_on:
      - mysql
    ports:
      - "21111:11111"
    volumes:
      - ./canal-server/logs:/home/admin/canal-server/logs
    networks:
      - canal-network
    restart: always

  canal-adapter:
    image: slpcat/canal-adapter:v1.1.5
    container_name: nico-canal-adapter
    environment:
      canal.conf.mode: tcp
      canal.conf.canalServerHost: canal-server:11111
      canal.conf.srcDataSources.default.url: jdbc:mysql://mysql:3306/nicofile
      canal.conf.srcDataSources.default.username: canal
      canal.conf.srcDataSources.default.password: canal
      canal.conf.destinations: nicoSlave
    volumes:
      - ./ES/application.yml:/opt/canal-adapter/conf/application.yml
      - ./ES/es7:/opt/canal-adapter/conf/es7
      - ./canal-adapter/logs:/opt/canal-adapter/logs
    depends_on:
      - canal-server
      - elasticsearch
    ports:
      - "28081:8081"
    networks:
      - canal-network
    restart: always

  elasticsearch:
    image: elasticsearch:7.17.0
    container_name: nico-elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "29200:9200"
      - "29300:9300"
    volumes:
      - ./ES/data:/usr/share/elasticsearch/data
    networks:
      - canal-network
    restart: always


networks:
  kafka-etcd-network:
    driver: bridge
  monitoring-network:
    driver: bridge
  canal-network:
    driver: bridge

volumes:
  etcd-data:
    driver: local
  kafka-data:
    driver: local