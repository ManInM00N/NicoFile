services:
  nicofile-redis:
    image: redis:7.0.12
    container_name: nico-redis
    ports:
      - "6380:6380"
    volumes:
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./redis/data:/data
    command: redis-server /etc/redis/redis.conf
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "2"
  nicofile_kafka:
    image: bitnami/kafka:3.9.0
    container_name: nico-kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT="yes"  # 启用 Kraft 模式
      - KAFKA_CFG_PROCESS_ROLES=broker,controller  # 启用 KRaft 模式
      - KAFKA_CFG_NODE_ID=1  # 节点 ID
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER  # 指定控制器监听器名称
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093  # 投票者配置
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093  # 监听器
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092  # 对外暴露的地址
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes  # 允许明文通信
    volumes:
      - ./kafka:/bitnami/kafka
    restart: always
    networks:
      - kafka-etcd-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
  etcd:
    image: bitnami/etcd:3.5.18
    container_name: nico-etcd
    hostname: etcd
    user: root  # 以 root 用户运行容器
    ports:
      - "2379:2379"  # Etcd 客户端端口
      - "2380:2380"  # Etcd 集群通信端口
    environment:
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
      ETCD_INITIAL_ADVERTISE_PEER_URLS: "http://etcd:2380"
      ETCD_LISTEN_PEER_URLS: "http://0.0.0.0:2380"
      ETCD_INITIAL_CLUSTER: "etcd_kafka=http://etcd:2380"
      ETCD_INITIAL_CLUSTER_TOKEN: "etcd-cluster"
      ETCD_INITIAL_CLUSTER_STATE: "new"
      ETCD_NAME: "etcd_kafka"
      ALLOW_NONE_AUTHENTICATION: yes
    volumes:
      - ./etcd:/bitnami/etcd
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    networks:
      - kafka-etcd-network
  # Prometheus 服务
  prometheus:
    image: prom/prometheus:latest
    container_name: nico-prometheus
    ports:
      - "29090:9090"  # Prometheus Web UI 端口
    volumes:
      - ./nicofile/etc/prometheus.yml:/etc/prometheus/prometheus.yml  # 挂载 Prometheus 配置文件
    networks:
      - monitoring-network
    restart: always

  # Grafana 服务
  grafana:
    image: grafana/grafana:latest
    container_name: nico-grafana
    restart: always
    ports:
      - "23000:3000"  # Grafana Web UI 端口
    volumes:
      - ./grafana-data:/var/lib/grafana  # 持久化 Grafana 数据
    networks:
      - monitoring-network



  mysql:
    image: mysql:5.7
    container_name: nico-mysql
    command: --server-id=1 --log-bin=mysql-bin --binlog-format=ROW --binlog-row-image=FULL --bind-address=0.0.0.0 --skip-name-resolve
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: nicofile
      MYSQL_USER: slave
      MYSQL_PASSWORD: slave
    ports:
      - "23306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
    restart: always

    networks:
      - canal-network

  mysql2:
    image: mysql:8.0.22
    container_name: nico-mysql2
    command: --server-id=1 --log-bin=mysql-bin --binlog-format=ROW --binlog-row-image=FULL --bind-address=0.0.0.0 --skip-name-resolve
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: nicofile
      MYSQL_USER: slave
      MYSQL_PASSWORD: slave
    ports:
      - "23307:3306"
    volumes:
      - ./mysql_data1:/var/lib/mysql
    restart: always

    networks:
      - canal-network

  elasticsearch:
    image: elasticsearch:7.17.0
    container_name: nico-elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "29200:9200"
      - "29300:9300"
    volumes:
      - ./ES/data:/usr/share/elasticsearch/data
    networks:
      - canal-network
    restart: always

  go-mysql-elasticsearch:
    image: gozer/go-mysql-elasticsearch:latest
    container_name: nico-go-mysql-elasticsearch
    depends_on:
      - mysql
      - elasticsearch
    volumes:
      - ./transfer/etc/river.toml:/config/river.toml
    restart: unless-stopped
    networks:
      - canal-network

  kibana:
    image: kibana:7.17.0
    container_name: elk_kibana
    restart: always
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    privileged: true    #环境变量

#  nico:
#    build: .  # 使用当前目录的 Dockerfile 构建
#    container_name: nicofile  # 自定义容器名（可选）
#    restart: unless-stopped  # 自动重启（可选）
#    extra_hosts:
#      - "host.docker.internal:host-gateway"  # 让容器能访问宿主机
#    volumes:
#      - ./nicofile/etc/nicofile-api.yaml:/app/nicofile/etc/nicofile-api.yaml
#    ports:  # 如果需要暴露端口
#       - "8888:8888"


networks:
  kafka-etcd-network:
    driver: bridge
  monitoring-network:
    driver: bridge
  canal-network:
    driver: bridge

volumes:
  etcd-data:
    driver: local
  kafka-data:
    driver: local