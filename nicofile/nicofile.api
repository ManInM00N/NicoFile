syntax = "v1"

type (
	Null  {}
)

type Auth {
	AccessToken  string `json:"access_token"`
	AccessExpire int64  `json:"access_expire"`
}

type (
	LoginRequest {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	RegisterRequest {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	AuthResponse {
		Error    bool   `json:"error"`
		Message  string `json:"message"`
		Token    string `json:"token"`
		Username string `json:"username"`
	}
	NewNameRequest {
		NewName string `json:"newName"`
	}
	NewNameResponse {
		Error   bool   `json:"error"`
		Message string `json:"message"`
	}
	NewPasswordRequest {
		NewPassword string `json:"newPassword"`
	}
	NewPasswordResponse {
		Error   bool   `json:"error"`
		Message string `json:"message"`
	}
	Request {
		Name string `path:"name,options=you|me"`
	}
	Response {
		Message string `json:"message"`
	}
	LoginTokenRequest  {}
	CheckResponse {
		Error    bool   `json:"error"`
		Message  string `json:"message"`
		Username string `json:"username"`
	}
	DeleteUserRequest {
		Userid int64 `form:"userid"`
	}
	DeleteUserResponse {
		Error   bool   `json:"error"`
		Message string `json:"message"`
	}
)

service nicofile-api {
	@handler NicofileHandler
	get /from/:name (Request) returns (Response)
}

@server (
	prefix:  /api/v1
	group:   user
	timeout: 3s
)
service nicofile-api {
	@handler UserLoginHandler
	post /user/login (LoginRequest) returns (AuthResponse)

	@handler UserRegisterHandler
	post /user/register (RegisterRequest) returns (AuthResponse)
}

@server (
	prefix:     /api/v1
	group:      user
	timeout:    3s
	middleware: UserExistMiddleware
	jwt:        Auth
)
service nicofile-api {
	@handler UserChangeNameHandler
	post /user/newname (NewNameRequest) returns (NewNameResponse)

	@handler UserChangePasswordHandler
	post /user/newpassword (NewPasswordRequest) returns (NewPasswordResponse)

	@handler UserLoginTokenHandler
	post /user/loadtoken (LoginTokenRequest) returns (CheckResponse)

	@handler DeleteUserHandler
	delete /user/delete (DeleteUserRequest) returns (DeleteUserResponse)

	@handler UploadCoverHandler
	post /user/upload (UploadIMGRequest) returns (UploadIMGResponse)
}

type (
	FileMeta {
		Id           int64  `json:"id"`
		FileName     string `json:"filename"`
		FilePath     string `json:"filepath"`
		FileSize     int64  `json:"filesize"`
		UploadedSize int64  `json:"uploadedsize"`
		Status       string `json:"status"`
		CreatedAt    string `json:"createdat"`
	}
	FileUploadRequest  {}
	FileUploadResponse  {}
	FileDownloadRequest {
		Url string `form:"url"`
	}
	FileDownloadResponse  {}
	FileDeleteRequest {
		FileId int64 `form:"fileid"`
	}
	FileDeleteResponse {
		Message string `json:"message"`
		Error   bool   `json:"error"`
	}
	FileListRequest {
		Id   int64 `json:"id,optional"`
		Page int   `json:"page,range=[1:]"`
		Size int64 `json:"size,optional"`
	}
	FileListResponse {
		List     []File `json:"list"`
		Num      int    `json:"num"`
		Error    bool   `json:"error"`
		Message  string `json:"message"`
		AllPages int    `json:"allpages"`
		Page     int    `json:"page"`
	}
	File {
		Id             uint   `json:"id"`
		PosterId       uint   `json:"posterId"`
		PosterName     string `json:"posterName"`
		MD5            string `json:"md5"`
		Name           string `json:"name"`
		Ext            string `json:"ext"`
		Path           string `json:"path"`
		Size           int64  `json:"size"`
		Desc           string `json:"desc"`
		DonwloadCounts int64  `json:"downloadcounts"`
		CreatedAt      string `json:"createdAt"`
	}
	UploadChunkRequest {
		FileName   string `form:"filename"`
		MD5        string `form:"md5"`
		ChunkIndex int    `form:"chunkIndex"`
		Ext        string `form:"ext"`
	}
	UploadChunkResponse {
		Error   bool   `json:"error,options=true|false"`
		Message string `json:"message,optional"`
	}
	MergeChunkRequest {
		FileName    string `json:"filename"`
		MD5         string `json:"md5,optional"`
		Ext         string `json:"ext"`
		ChunkNum    int    `json:"chunkNum,range=[1:]"`
		Size        int64  `json:"size"`
		Description string `json:"description,optional"`
	}
	MergeChunkResponse {
		Error   bool   `json:"error,options=true|false"`
		Message string `json:"message,optional"`
	}
	CheckChunkRequest {
		FileName string   `json:"filename"`
		MD5      []string `json:"md5"`
		ChunkNum int      `json:"chunkNum"`
		FileMd5  string   `json:"fileMd5"`
		Ext      string   `json:"ext"`
	}
	CheckChunkResponse {
		Error   bool   `json:"error,options=true|false"`
		Accept  int    `json:"accept,range=[0:]"`
		Message string `json:"message,optional"`
	}
)

@server (
	prefix:     /api/v1
	jwt:        Auth
	middleware: UserExistMiddleware
	timeout:    15s
	group:      file
)
service nicofile-api {
	@handler FileUploadHandler
	post /file/upload (FileUploadRequest) returns (FileUploadResponse)

	@handler FileDeleteHandler
	delete /file/delete (FileDeleteRequest) returns (FileDeleteResponse)

	@handler UploadChunkHandler
	post /file/uploadchunk (UploadChunkRequest) returns (UploadChunkResponse)

	@handler MergeChunkHandler
	post /file/mergechunk (MergeChunkRequest) returns (MergeChunkResponse)

	@handler CheckChunkHandler
	post /file/checkchunk (CheckChunkRequest) returns (CheckChunkResponse)
}

@server (
	prefix:  /api/v1
	timeout: 15s
	group:   file
)
service nicofile-api {
	@handler FileDownloadHandler
	get /file/download (FileDownloadRequest) returns (FileDownloadResponse)

	@handler FileListHandler
	post /file/list (FileListRequest) returns (FileListResponse)
}

type (
	Article {
		Id         int64  `json:"id"`
		Title      string `json:"title"`
		Content    string `json:"content"`
		CreatedAt  string `json:"createdat"`
		View       int64  `json:"view"`
		Like       int64  `json:"like"`
		AuthorId   int64  `json:"authorid"`
		AuthorName string `json:"authorname"`
		Cover      string `json:"cover"`
	}
	ArticleCreateRequest {
		Title   string `json:"title"`
		Content string `json:"content"`
		Cover   string `json:"cover"`
	}
	ArticleDeleteRequest {
		Id int64 `path:"id"`
	}
	ArticleDeleteResponse {
		Error   bool   `json:"error"`
		Message string `json:"message"`
	}
	ArticleResponse {
		Error      bool   `json:"error"`
		Message    string `json:"message"`
		Title      string `json:"title"`
		Content    string `json:"content"`
		CreatedAt  string `json:"createdat"`
		View       string `json:"view"`
		Like       string `json:"like"`
		ArticleId  string `json:"articleid"`
		AuthorId   string `json:"authorid"`
		AuthorName string `json:"authorname"`
	}
	ArticleListRequest {
		Page int   `json:"page,range=[1:]"`
		Size int64 `json:"size,optional"`
	}
	ArticleListResponse {
		List     []Article `json:"list"`
		Num      int       `json:"num"`
		Error    bool      `json:"error"`
		Message  string    `json:"message"`
		AllPages int       `json:"allpages"`
		Page     int       `json:"page"`
	}
	ArticleUpdateRequest {
		Id      int64  `path:"id"`
		Title   string `json:"title"`
		Content string `json:"content"`
	}
	ArticleRequest {
		Id int64 `path:"id"`
	}
	ArticleLikeRequest {
		Id int64 `json:"id"`
	}
)

@server (
	prefix:     /api/v1
	jwt:        Auth
	middleware: UserExistMiddleware
	group:      article
)
service nicofile-api {
	@handler ArticleCreateHandler
	post /article (ArticleCreateRequest) returns (ArticleResponse)

	@handler ArticleUpdateHandler
	put /article/:id (ArticleUpdateRequest) returns (ArticleResponse)

	@handler ArticleDeleteHandler
	delete /article/:id (ArticleDeleteRequest) returns (ArticleDeleteResponse)
}

@server (
	prefix: /api/v1
	group:  article
)
service nicofile-api {
	@handler ArticleListHandler
	post /article/list (ArticleListRequest) returns (ArticleListResponse)

	@handler ArticleDetailHandler
	get /article/:id (ArticleRequest) returns (ArticleResponse)

	@handler ArticleLikeHandler
	post /article/like (ArticleLikeRequest) returns (Response)

	@handler ArticleRankHandler
	get /article/rank (Null) returns (ArticleListResponse)
}

type UploadIMGRequest {}

type UploadIMGResponse {
	URL string `json:"url"` // 图片访问URL
}

type DownloadIMGRequest {
	ID string `path:"id"` // 图片ID
}

type DownloadIMGResponse {}

@server (
	prefix: /api/v1
	group:  image
	jwt:    Auth
)
service nicofile-api {
	@handler UploadIMGHandler
	post /img/upload (UploadIMGRequest) returns (UploadIMGResponse)
}

@server (
	prefix: /api/v1
	group:  image
)
service nicofile-api {
	@handler DownloadIMGHandler
	get /img/download/:id (DownloadIMGRequest) returns (DownloadIMGResponse)

	@handler IMGCoverHandler
	get /img/cover/:id (DownloadIMGRequest) returns (DownloadIMGResponse)
}

type (
	Comment {
		Id        int64     `json:"id"`
		IP        string    `json:"ip"`
		ArticleId int64     `json:"articleid"`
		Content   string    `json:"content"`
		CreatedAt string    `json:"createdat"`
		AuthorId  int64     `json:"authorid"`
		Author    string    `json:"author"`
		ParentId  int64     `json:"parentid"`
		Comments  []Comment `json:"comments"`
	}
	CommentCreateRequest {
		ArticleId int64  `json:"articleid"`
		ParentId  *int64 `json:"parentid,optional"`
		Content   string `json:"content"`
	}
	CommentResponse {
		Error    bool   `json:"error"`
		Message  string `json:"message"`
		Comment  string `json:"comment"`
		AuthorId string `json:"authorid"`
		Author   string `json:"author"`
	}
	CommentListRequest {
		ArticleId int64 `form:"articleid"`
		Page      int   `json:"page,range=[1:],optional"`
		Size      int64 `json:"size,optional"`
	}
	CommentListResponse {
		List     []Comment `json:"list"`
		Num      int       `json:"num"`
		Error    bool      `json:"error"`
		Message  string    `json:"message"`
		AllPages int       `json:"allpages"`
		Page     int       `json:"page"`
	}
)

@server (
	prefix: /api/v1
	group:  comment
	jwt:    Auth
)
service nicofile-api {
	@handler CommentCreateHandler
	post /comment (CommentCreateRequest) returns (CommentResponse)

	@handler CommentDeleteHandler
	delete /comment/:id (DownloadIMGRequest) returns (Response)
}

@server (
	prefix: /api/v1
	group:  comment
)
service nicofile-api {
	@handler CommentListHandler
	get /comment/list (CommentListRequest) returns (CommentListResponse)
}

